#!/bin/bash

#########
# Utils #
#########

# Checks for installed programs on machine
function programInstalled
{
	local returning=1
	type $1 >/dev/null 2>&1 || { local returning=0; }
	echo "$returning"
}

# Make sure only non-root users can run our script
if [[ $EUID -eq 0 ]]
then
   echo "SJSU-DEV installer script must NOT be run as root! " 1>&2
   exit 1
fi

echo " ──────────────────────────────────────────────────┐"
echo "  List of software installed globally:              "
echo "   1) Python                                        "
echo "   2) Python pip                                    "
echo "   3) Curl                                          "
echo "   4) Git CLI                                       "
echo "   5) Perl                                          "
echo "   6) Valgrind"
echo "   7) Valgrind"
echo "   6) OpenOCD (Debian/Ubuntu Only)                  "
echo "   7) XCode CLI tools (MacOS Only)                  "
echo "   7) Build Essential tools (Debian/Ubuntu Only)    "
echo "└────────────────────────────────────────────────── "
echo "            Acquiring sudo privileges               "
echo "└────────────────────────────────────────────────── "
sudo echo "" || exit 1
# Stash the tool directory
TOOLDIR=$(dirname "$0")/tools
# Get System Architecture
ARCH=$(uname -m)
# Get System Operating System
OS=$(uname -s)
# Get base path
BASE=$(pwd)
# Define name of the arm version we are downloading
ARM_GCC_URL="https://developer.arm.com/-/media/Files/downloads/gnu-rm/7-2017q4/"
ARM_GCC_COMMON="gcc-arm-none-eabi-7-2017-q4-major"
ARM_GCC_ARCHIVE_FILE_LINUX="$ARM_GCC_COMMON-linux.tar.bz"
ARM_GCC_ARCHIVE_FILE_MAC="$ARM_GCC_COMMON-mac.tar.bz"
ARM_GCC_ARCHIVE_LINUX_URL="$ARM_GCC_URL$ARM_GCC_ARCHIVE_FILE_LINUX"
ARM_GCC_ARCHIVE_MAC_URL="$ARM_GCC_URL$ARM_GCC_ARCHIVE_FILE_MAC"

echo " ──────────────────────────────────────────────────┐"
echo ""
echo "  Starting SJSU-DEV-Linux Environment Setup Script  "
echo ""
echo "└────────────────────────────────────────────────── "
sleep 1
echo " ──────────────────────────────────────────────────┐"
echo "              Detecting your platform               "
echo "└────────────────────────────────────────────────── "
if [[ "$ARCH" != 'x86_64' || "$ARCH" == "amd64" ]]
then
	echo 'Only 64-bit architecture systems are supported!'
	exit 1
fi
echo " ──────────────────────────────────────────────────┐"
echo "               System Dependent Setup               "
echo "└────────────────────────────────────────────────── "
cd $TOOLDIR
case "$OS" in
	Linux) # Linux & Windows WSL Case
		echo "Operating System: Linux"
		SJSUONEDEV=/dev/ttyUSB0
		echo " ───────────────────────────────────────────────────┐"
		echo "        Installing build-essentials (GCC, make)      "
		echo "└─────────────────────────────────────────────────── "
		sudo apt -y install build-essential
		echo " ───────────────────────────────────────────────────┐"
		echo "      Installing Git, Python, PIP, Curl and Perl     "
		echo "└─────────────────────────────────────────────────── "
		sudo apt -y install git python python-pip curl perl
		echo " ───────────────────────────────────────────────────┐"
		echo "             Installing Testing Tools                "
		echo "└─────────────────────────────────────────────────── "
		sudo apt -y install valgrind
		echo " ───────────────────────────────────────────────────┐"
		echo "                Installing OpenOCD                   "
		echo "└─────────────────────────────────────────────────── "
		sudo apt -y install openocd
		echo " ──────────────────────────────────────────────────┐"
		echo "      Adding current user to '$GROUP' group"
		echo "└────────────────────────────────────────────────── "
		THE_GROUP=$(getent group | grep 'dial' | cut -d: -f1)
		sudo adduser $USER $THE_GROUP
		echo " ──────────────────────────────────────────────────┐"
		echo "           Downloading gcc-arm-embedded             "
		echo "└────────────────────────────────────────────────── "
		curl -C - -LO $ARM_GCC_ARCHIVE_LINUX_URL
		GCC_PKG=$ARM_GCC_ARCHIVE_FILE_LINUX
		;;

	Darwin) # OS X Case
		echo "Operating System: Mac OSX Darvin"
		SJSUONEDEV=/dev/tty.usbserial-A503JOLS
        echo " ───────────────────────────────────────────────────┐"
		echo "    Install XCode Command Line Tools (GCC, make)     "
		echo "└─────────────────────────────────────────────────── "
        xcode-select --install &> /dev/null	# Install Command Line tools (make etc...)
		sudo xcodebuild -license accept # Accept User Agreement
        echo " ───────────────────────────────────────────────────┐"
		echo "          Prompt Git installer by invoking it        "
		echo "└─────────────────────────────────────────────────── "
        git --version
        echo " ───────────────────────────────────────────────────┐"
		echo "          Using EASY_INSTALL to install PIP          "
		echo "└─────────────────────────────────────────────────── "
		sudo easy_install pip
		echo " ──────────────────────────────────────────────────┐"
		echo "            Downloading gcc-arm-embedded            "
		echo "└────────────────────────────────────────────────── "
		curl -C - -LO $ARM_GCC_ARCHIVE_MAC_URL
		GCC_PKG=$ARM_GCC_ARCHIVE_FILE_MAC
		;;

	*)	#Default if Operating System other than Mac or Linux
		echo "Only Linux, OSX, and WSL (Windows Subsystem Linux) systems are supported! Exiting..."
		exit 1
		;;
esac

echo " ──────────────────────────────────────────────────┐"
echo "            Extracting gcc-arm-embedded             "
echo "└────────────────────────────────────────────────── "
tar --extract \
	--verbose \
	--bzip2 \
	--file="$GCC_PKG"\
	--exclude='share/doc' 2> /dev/null
cd "$BASE"
echo " ───────────────────────────────────────────────────┐"
echo "                   Upgrading PIP                     "
echo "└─────────────────────────────────────────────────── "
sudo -H pip install --upgrade pip
echo " ───────────────────────────────────────────────────┐"
echo "            Upgrading Python's Virtualenv            "
echo "└─────────────────────────────────────────────────── "
sudo -H pip install --upgrade virtualenv
echo " ───────────────────────────────────────────────────┐"
echo "          Upgrading GNU Code Coverage Tools          "
echo "└─────────────────────────────────────────────────── "
sudo -H pip install --upgrade gcovr
echo " ───────────────────────────────────────────────────┐"
echo "                Setting Up Hyperload                 "
echo "└─────────────────────────────────────────────────── "
rm -rf "$TOOLDIR/Hyperload/"
git clone --depth=1 https://github.com/kammce/Hyperload.git "$TOOLDIR/Hyperload/"
cd "$TOOLDIR/Hyperload/" && ./setup
cd "$BASE"
echo " ───────────────────────────────────────────────────┐"
echo "                Setting Up Telemetry                 "
echo "└─────────────────────────────────────────────────── "
rm -rf cd $TOOLDIR/Telemetry/
git clone --depth=1 https://github.com/kammce/Telemetry.git "$TOOLDIR/Telemetry"
cd "$TOOLDIR/Telemetry/" && ./setup
cd "$BASE"
echo " ───────────────────────────────────────────────────┐"
echo "        Generating Environment Variables File        "
echo "└─────────────────────────────────────────────────── "
cat > env.sh <<EOL
#!/bin/bash
# Setup a base directory:
SJBASE="$BASE"

# SJSUOne Board Settings:
SJDEV="$SJSUONEDEV" # Set this to your board ID
SJBAUD=38400

# Project Target Settings:
# Sets the binary name, defaults to "firmware" (Optional)
SJPROJ=firmware

# Sets which DBC to generate, defaults to "DBG"
ENTITY=DBG

# Compiler and library settings:
# Selects compiler version to use
PATH=\$(printf %q "\$PATH:\$SJBASE/tools/$ARM_GCC_COMMON/bin")
SJLIBDIR="\$SJBASE/firmware/library"

# Export everything to the environment
export SJBASE
export SJDEV
export SJBAUD
export SJPROJ
export ENTITY
export PATH
export SJLIBDIR
EOL

echo " ───────────────────────────────────────────────────┐"
echo "        Linking Files into Firmware projects         "
echo "└─────────────────────────────────────────────────── "
# DEFAULT_PROJECTS=HelloWorld FreeRTOS Telemetry Unittest
DEFAULT_PROJECTS=HelloWorld
for PROJECT in $DEFAULT_PROJECTS
do
	# Place env.sh link into project folder
    rm -f "firmware/$PROJECT/env.sh"
	ln -s -f "$BASE/env.sh" "firmware/$PROJECT/env.sh"
	# Place makefile link into project folder
    rm -f "firmware/$PROJECT/makefile"
	ln -s -f "$BASE/makefile" "firmware/$PROJECT/makefile"

    # ========================================================
    # Unit Testing Setup Area
    #    TODO: remove comment and fix when unit testing
    #          has been installed.
    # ========================================================

    # # Place Unit test template folder into project folder
    # rm -rf "firmware/$PROJECT/test/"
    # mkdir -p "firmware/$PROJECT/test/"
    # ln -s -f "$BASE/tools/Unittest-Template/README.md" "firmware/$PROJECT/test/README.md"
	# # Copy simple tests into project folder
	# cp -rf "$BASE/tools/Unittest-Template/simple-test/" "firmware/$PROJECT/test/"
	# # Place the unit test makefile link into project folder
	# ln -s -f "$BASE/makefile.test" "firmware/$PROJECT/test/simple-test/makefile"
done
echo " ───────────────────────────────────────────────────┐"
echo "                   SETUP COMPLETE!                   "
echo "                                                     "
echo " IF THIS IS YOUR FIRST TIME RUNNING THE SETUP SCRIPT "
echo "             PLEASE RESTART YOUR SYSTEM              "
echo "         TO LOAD CODE INTO YOUR SJONE BOARD          "
echo "└─────────────────────────────────────────────────── "