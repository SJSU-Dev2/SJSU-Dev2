#!/bin/bash

# Make sure only non-root users can run our script
if [[ $EUID -eq 0 ]]
then
	 echo "SJSU-DEV installer script must NOT be run as root! " 1>&2
	 exit 1
fi

echo " ──────────────────────────────────────────────────┐"
echo "  List of global software installed:                "
echo "   1) Python3                                       "
echo "   2) pip (Python3 package manager)                 "
echo "   3) Curl                                          "
echo "   4) Git                                           "
echo "   5) Gcovr                                         "
echo "   6) XCode CLI tools (OSX Only)                    "
echo "└────────────────────────────────────────────────── "
echo "            Acquiring sudo privileges               "
echo "└────────────────────────────────────────────────── "
sudo echo "" || exit 1
# Get base path
BASE=$(dirname "$0")
BASE=$(cd $BASE ; pwd -P)
# Stash the tool directory
TOOLDIR=$BASE/tools
# Get System Architecture
ARCH=$(uname -m)
# Get System Operating System
OS=$(uname -s)
# Define name of the arm version we are downloading
TOOLS_BUNDLE_BASE_URL="https://github.com/kammce/SJSU-Dev2/releases/download/v2.0/bundle-arm-gcc7-clang7-openocd10"
TOOLS_BUNDLE_URL_LINUX="$TOOLS_BUNDLE_BASE_URL-linux.tar.bz2"
TOOLS_BUNDLE_URL_OSX="$TOOLS_BUNDLE_BASE_URL-osx.tar.bz2"
# Set later
TOOLS_BUNDLE_URL=

echo " ──────────────────────────────────────────────────┐"
echo ""
echo "  Starting SJSU-DEV-Linux Environment Setup Script  "
echo ""
echo "└────────────────────────────────────────────────── "
sleep 1
echo " ──────────────────────────────────────────────────┐"
echo "              Detecting your platform               "
echo "└────────────────────────────────────────────────── "
if [[ "$ARCH" != 'x86_64' || "$ARCH" == "amd64" ]]
then
		echo 'Only 64-bit architecture systems are supported!'
		exit 1
fi
echo " ──────────────────────────────────────────────────┐"
echo "               System Dependent Setup               "
echo "└────────────────────────────────────────────────── "
if [[ "$1" != "fast" ]]; then
cd "$TOOLDIR"
case "$OS" in
	Linux) # Linux & Windows WSL Case
		echo "Operating System: Linux"
		TOOLS_BUNDLE_URL=$TOOLS_BUNDLE_URL_LINUX
		echo " ───────────────────────────────────────────────────┐"
		echo "                   Updating Apt                      "
		echo "└─────────────────────────────────────────────────── "
		sudo apt update
		echo " ───────────────────────────────────────────────────┐"
		echo "    Installing git, make python3, pip3, Curl, tar    "
		echo "└─────────────────────────────────────────────────── "
		sudo apt -y install git make python3 python3-pip curl tar
		echo " ───────────────────────────────────────────────────┐"
		echo "             Downloading Tools Bundle                "
		echo "└─────────────────────────────────────────────────── "
		curl -C - -LO "$TOOLS_BUNDLE_URL"
		echo " ──────────────────────────────────────────────────┐"
		echo "       Adding current user to 'dialout' group        "
		echo "└────────────────────────────────────────────────── "
		DIALOUT_GROUP=$(getent group | grep 'dial' | cut -d: -f1)
		sudo adduser $USER $DIALOUT_GROUP
		;;

	Darwin) # OS X Case
		echo "Operating System: Mac OSX Darvin"
		TOOLS_BUNDLE_URL=$TOOLS_BUNDLE_URL_OSX
		echo " ───────────────────────────────────────────────────┐"
		echo "    Install XCode Command Line Tools (GCC, make)     "
		echo "└─────────────────────────────────────────────────── "
		# Install Command Line tools (make etc...)
		xcode-select --install &> /dev/null
		# Accept User Agreement
		sudo xcodebuild -license accept
		echo " ───────────────────────────────────────────────────┐"
		echo "          Prompt Git installer by invoking it        "
		echo "└─────────────────────────────────────────────────── "
		git --version
		echo " ───────────────────────────────────────────────────┐"
		echo "        Installing PIP via bootstrap.pypa.io         "
		echo "└─────────────────────────────────────────────────── "
		curl https://bootstrap.pypa.io/get-pip.py | python3
		;;

	*)	# Default if Operating System other than Mac or Linux
		echo -n "Only Linux, OSX, and WSL (Windows Subsystem Linux) systems "
		echo "are supported! Exiting..."
		exit 1
		;;
esac

echo " ───────────────────────────────────────────────────┐"
echo "                  Upgrading PIP                      "
echo "└─────────────────────────────────────────────────── "
sudo -H python3 -m pip install --upgrade pip
echo " ───────────────────────────────────────────────────┐"
echo "                 Installing Gcovr                    "
echo "└─────────────────────────────────────────────────── "
sudo -H python3 -m pip install gcovr
echo " ───────────────────────────────────────────────────┐"
echo "           Installing/Upgrading Virtualenv           "
echo "└─────────────────────────────────────────────────── "
sudo -H python3 -m pip install --upgrade virtualenv
echo " ──────────────────────────────────────────────────┐"
echo "           Deleting Old Tools (if present)          "
echo "└────────────────────────────────────────────────── "
cd "$TOOLDIR/"
# Delete old openocd folder
rm -r "openocd" &> /dev/null
rm -r "gcc-arm*" &> /dev/null
rm -r "clang+llvm*" &> /dev/null
echo " ───────────────────────────────────────────────────┐"
echo "             Downloading tools Bundle                "
echo "└─────────────────────────────────────────────────── "
curl -C - -LO "$TOOLS_BUNDLE_URL"
echo " ──────────────────────────────────────────────────┐"
echo "             Extracting tools bundle                "
echo "└────────────────────────────────────────────────── "
tar --extract --bzip --file="$(basename $TOOLS_BUNDLE_URL)"
echo
fi

cd "$BASE"

echo " ───────────────────────────────────────────────────┐"
echo "                Setting Up nxpprog                   "
echo "└─────────────────────────────────────────────────── "
rm -rf "$TOOLDIR/nxpprog/"
git clone --depth=1 https://github.com/kammce/nxpprog.git \
                    "$TOOLDIR/nxpprog/"
cd "$TOOLDIR/nxpprog/" && ./setup

cd "$BASE"

echo " ───────────────────────────────────────────────────┐"
echo "         Generating SJSU-Dev2 Location File          "
echo "└─────────────────────────────────────────────────── "
cat > ~/.sjsu_dev2.mk << EOL
# Location of SJSU-Dev2 folder
SJSU_DEV2_BASE    = $BASE
EOL
echo " ───────────────────────────────────────────────────┐"
echo "      Linking Files to Firmware Project Folder       "
echo "└─────────────────────────────────────────────────── "
./tools/link_projects.sh
echo " ───────────────────────────────────────────────────┐"
echo "                   SETUP COMPLETE!                   "
echo "                                                     "
echo " IF THIS IS YOUR FIRST TIME RUNNING THE SETUP SCRIPT "
echo "             PLEASE RESTART YOUR SYSTEM              "
echo "└─────────────────────────────────────────────────── "
